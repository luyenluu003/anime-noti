import React, { useState, useEffect } from 'react';

const NotificationSystem = () => {
  const [notifications, setNotifications] = useState([]);
  const [isVisible, setIsVisible] = useState(false);

  // Danh s√°ch th√¥ng b√°o nh·∫Øc nh·ªü
  const reminderMessages = [
    "Ngh·ªâ ng∆°i ch√∫t ƒëi! üòä",
    "ƒê√£ ƒë·∫øn l√∫c u·ªëng n∆∞·ªõc r·ªìi! üíß",
    "H√£y th∆∞ gi√£n m·∫Øt m·ªôt ch√∫t nh√©! üëÄ",
    "ƒê·ª©ng d·∫≠y ƒëi l·∫°i m·ªôt ch√∫t n√†o! üö∂‚Äç‚ôÄÔ∏è",
    "B·∫°n ƒë√£ l√†m vi·ªác chƒÉm ch·ªâ r·ªìi! üåü",
    "H√£y nh√¨n ra c·ª≠a s·ªï v√† th∆∞ gi√£n! üå∏",
    "ƒê·∫øn gi·ªù ngh·ªâ tr∆∞a r·ªìi! üç±",
    "H√≠t th·ªü s√¢u v√† th∆∞ gi√£n! üßò‚Äç‚ôÄÔ∏è",
    "B·∫°n ƒëang l√†m r·∫•t t·ªët! üí™",
    "H√£y chƒÉm s√≥c b·∫£n th√¢n nh√©! üíñ",
    "ƒê√£ ƒë·∫øn l√∫c ngh·ªâ ng∆°i r·ªìi! ‚òï",
    "H√£y nghe nh·∫°c th∆∞ gi√£n! üéµ",
    "ƒê·ª©ng d·∫≠y v√† v∆∞∆°n vai n√†o! ü§∏‚Äç‚ôÄÔ∏è",
    "B·∫°n c·∫ßn ngh·ªâ ng∆°i ƒë·∫•y! üò¥",
    "H√£y ƒëi d·∫°o m·ªôt ch√∫t! üåø"
  ];

  // Hi·ªÉn th·ªã th√¥ng b√°o ng·∫´u nhi√™n
  const showRandomNotification = () => {
    const randomMessage = reminderMessages[Math.floor(Math.random() * reminderMessages.length)];
    const newNotification = {
      id: Date.now(),
      message: randomMessage,
      timestamp: new Date()
    };

    setNotifications(prev => [...prev, newNotification]);
    setIsVisible(true);

    // T·ª± ƒë·ªông ·∫©n sau 4 gi√¢y
    setTimeout(() => {
      setIsVisible(false);
      setTimeout(() => {
        setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));
      }, 500); // ƒê·ª£i animation ho√†n th√†nh
    }, 4000);
  };

  // Thi·∫øt l·∫≠p interval ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o m·ªói 30 gi√¢y
  useEffect(() => {
    // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫ßu ti√™n sau 5 gi√¢y
    const initialTimeout = setTimeout(() => {
      showRandomNotification();
    }, 5000);

    // Sau ƒë√≥ hi·ªÉn th·ªã m·ªói 30 gi√¢y
    const interval = setInterval(() => {
      showRandomNotification();
    }, 30000);

    return () => {
      clearTimeout(initialTimeout);
      clearInterval(interval);
    };
  }, []);

  return (
    <div className="notification-container">
      {notifications.map((notification) => (
        <div
          key={notification.id}
          className={`notification-item ${
            isVisible ? 'notification-enter' : 'notification-exit'
          }`}
        >
          <div className="p-5 bg-white bg-opacity-95 rounded-lg border border-pink-200 shadow-lg backdrop-blur-sm">
            {/* N·ªôi dung th√¥ng b√°o ƒë∆°n gi·∫£n */}
            <div className="text-sm leading-relaxed text-gray-800">
              {notification.message}
            </div>
            
            {/* Th·ªùi gian */}
            <div className="mt-3 text-xs text-right text-gray-500">
              {notification.timestamp.toLocaleTimeString('vi-VN', {
                hour: '2-digit',
                minute: '2-digit'
              })}
            </div>
            
            {/* N√∫t ƒë√≥ng */}
            <button
              onClick={() => {
                setIsVisible(false);
                setTimeout(() => {
                  setNotifications(prev => prev.filter(notif => notif.id !== notification.id));
                }, 500);
              }}
              className="flex absolute top-1 right-1 justify-center items-center w-4 h-4 text-xs text-gray-600 bg-gray-200 rounded-full transition-colors hover:bg-gray-300"
            >
              √ó
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default NotificationSystem;
