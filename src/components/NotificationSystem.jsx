import React, { useState, useEffect } from 'react';

const NotificationSystem = ({ onNotificationShow }) => {
  const [notifications, setNotifications] = useState([]);
  const [isVisible, setIsVisible] = useState(false);

  // Danh s√°ch th√¥ng b√°o nh·∫Øc nh·ªü
  const reminderMessages = [
    "Ngh·ªâ ng∆°i ch√∫t ƒëi! üòä",
    "ƒê√£ ƒë·∫øn l√∫c u·ªëng n∆∞·ªõc r·ªìi! üíß",
    "H√£y th∆∞ gi√£n m·∫Øt m·ªôt ch√∫t nh√©! üëÄ",
    "ƒê·ª©ng d·∫≠y ƒëi l·∫°i m·ªôt ch√∫t n√†o! üö∂‚Äç‚ôÄÔ∏è",
    "B·∫°n ƒë√£ l√†m vi·ªác chƒÉm ch·ªâ r·ªìi! üåü",
    "H√£y nh√¨n ra c·ª≠a s·ªï v√† th∆∞ gi√£n! üå∏",
    "ƒê·∫øn gi·ªù ngh·ªâ tr∆∞a r·ªìi! üç±",
    "H√≠t th·ªü s√¢u v√† th∆∞ gi√£n! üßò‚Äç‚ôÄÔ∏è",
    "B·∫°n ƒëang l√†m r·∫•t t·ªët! üí™",
    "H√£y chƒÉm s√≥c b·∫£n th√¢n nh√©! üíñ",
    "ƒê√£ ƒë·∫øn l√∫c ngh·ªâ ng∆°i r·ªìi! ‚òï",
    "H√£y nghe nh·∫°c th∆∞ gi√£n! üéµ",
    "ƒê·ª©ng d·∫≠y v√† v∆∞∆°n vai n√†o! ü§∏‚Äç‚ôÄÔ∏è",
    "B·∫°n c·∫ßn ngh·ªâ ng∆°i ƒë·∫•y! üò¥",
    "H√£y ƒëi d·∫°o m·ªôt ch√∫t! üåø",
    "Th·ªùi gian ngh·ªâ ng∆°i ƒë√£ ƒë·∫øn! ‚è∞",
    "H√£y massage vai m·ªôt ch√∫t! üíÜ‚Äç‚ôÄÔ∏è",
    "ƒê√£ ƒë·∫øn l√∫c ƒÉn nh·∫π! üçé",
    "H√£y t·∫≠p th·ªÉ d·ª•c m·∫Øt! üëÅÔ∏è",
    "B·∫°n c·∫ßn ngh·ªâ ng∆°i ngay! ‚ö†Ô∏è",
    "H√£y th∆∞ gi√£n c∆° th·ªÉ! üßò‚Äç‚ôÇÔ∏è",
    "ƒê·∫øn gi·ªù u·ªëng tr√†! üçµ",
    "H√£y nghe ti·∫øng chim h√≥t! üê¶",
    "B·∫°n ƒëang l√†m vi·ªác qu√° nhi·ªÅu! üòÖ",
    "H√£y ngh·ªâ ng∆°i v√† t·∫≠n h∆∞·ªüng! üå∫",
    "ƒê√£ ƒë·∫øn l√∫c th∆∞ gi√£n! üåô",
    "H√£y chƒÉm s√≥c s·ª©c kh·ªèe! üè•",
    "B·∫°n c·∫ßn ngh·ªâ ng∆°i ngay b√¢y gi·ªù! üö®",
    "H√£y ƒëi·ªÅu ch·ªânh t∆∞ th·∫ø ng·ªìi! ü™ë",
    "ƒê·∫øn gi·ªù ngh·ªâ ng∆°i r·ªìi! üõå"
  ];

  // Hi·ªÉn th·ªã th√¥ng b√°o ng·∫´u nhi√™n
  const showRandomNotification = () => {
    const randomMessage = reminderMessages[Math.floor(Math.random() * reminderMessages.length)];
    const newNotification = {
      id: Date.now(),
      message: randomMessage,
      timestamp: new Date()
    };

    console.log('Showing notification:', newNotification); // Debug log
    setNotifications(prev => [...prev, newNotification]);
    setIsVisible(true);
    
    // Th√¥ng b√°o cho AnimeCharacter v·ªÅ vi·ªác c√≥ th√¥ng b√°o
    if (onNotificationShow) {
      onNotificationShow(true);
    }

    // T·ª± ƒë·ªông ·∫©n sau 4 gi√¢y
    setTimeout(() => {
      setIsVisible(false);
      setTimeout(() => {
        setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));
        // Th√¥ng b√°o cho AnimeCharacter v·ªÅ vi·ªác h·∫øt th√¥ng b√°o
        if (onNotificationShow) {
          onNotificationShow(false);
        }
      }, 500); // ƒê·ª£i animation ho√†n th√†nh
    }, 4000);
  };

  // Thi·∫øt l·∫≠p interval ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o m·ªói 15 gi√¢y
  useEffect(() => {
    // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫ßu ti√™n sau 3 gi√¢y
    const initialTimeout = setTimeout(() => {
      showRandomNotification();
    }, 3000);

    // Sau ƒë√≥ hi·ªÉn th·ªã m·ªói 15 gi√¢y
    const interval = setInterval(() => {
      showRandomNotification();
    }, 15000);

    return () => {
      clearTimeout(initialTimeout);
      clearInterval(interval);
    };
  }, []);
  
  return (
    <div className="notification-container">
      {notifications.map((notification) => (
        <div
          key={notification.id}
          className={`notification-item ${
            isVisible ? 'notification-enter' : 'notification-exit'
          }`}
        >
          <div className="relative">
            {/* Speech bubble */}
            <div className="p-5 bg-white bg-opacity-95 rounded-lg border border-pink-200 shadow-lg backdrop-blur-sm">
              {/* N·ªôi dung th√¥ng b√°o ƒë∆°n gi·∫£n */}
              <div className="text-sm leading-relaxed text-gray-800">
                {notification.message}
              </div>
              
              {/* Th·ªùi gian */}
              <div className="mt-3 text-xs text-right text-gray-500">
                {notification.timestamp.toLocaleTimeString('vi-VN', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </div>
              
              {/* N√∫t ƒë√≥ng */}
              <button
                onClick={() => {
                  setIsVisible(false);
                  setTimeout(() => {
                    setNotifications(prev => prev.filter(notif => notif.id !== notification.id));
                  }, 500);
                }}
                className="flex absolute top-1 right-1 justify-center items-center w-4 h-4 text-xs text-gray-600 bg-gray-200 rounded-full transition-colors hover:bg-gray-300"
              >
                √ó
              </button>
            </div>
            
            {/* M≈©i t√™n ch·ªâ xu·ªëng nh√¢n v·∫≠t */}
            <div className="absolute left-1/2 transform -translate-x-1/2" style={{top: '100%'}}>
              <div 
                className="w-0 h-0"
                style={{
                  borderLeft: '10px solid transparent',
                  borderRight: '10px solid transparent', 
                  borderTop: '15px solid rgba(255, 255, 255, 0.95)',
                  filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))'
                }}
              ></div>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default NotificationSystem;
